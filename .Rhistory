input = output[output[,1]+1==i,2:3,drop=FALSE]
output = output[output[,1]+1!=i,,drop=FALSE]
}else{
input = matrix(-1,nrow=1)
}
}else{
input = matrix(-1,nrow=1)
}
for(j in seq_len(nrow(input))){
A[[i]] = intfast(A[[i]]$op,input[j,],A[[i]]$n,1,A[[i]]$rb,FALSE,FALSE)
if(length(A[[i]]$out)) output = rbind(output,matrix(as.integer(A[[i]]$out),ncol=3,byrow=TRUE))
}
}
step = step + 1
cat(step,"\r")
if(any(output[,1]==255)){
stop(sprintf("Packet for address 255: (%i,%i)\n",output[output[,1]==255,1],output[output[,1]==255,2]))
}
}
i
output
input
#Day 23 Puzzle 1
options(digits=22)
source("intcode_fast_but_dirty.R")
code = scan("input23.txt",sep=",")
A=list()
for(i in 1:50){
A[[i]] = intfast(code,i-1,1,1,0,FALSE,FALSE)
}
output=matrix(nrow=0,ncol=3)
step=0
while(any(sapply(A,function(x)x$status))){
for(i in 1:50){
if(nrow(output)&ncol(output)){
if(i%in%output[,1]+1){
input = output[output[,1]+1==i,2:3,drop=FALSE]
output = output[output[,1]+1!=i,,drop=FALSE]
}else{
input = matrix(-1,nrow=1)
}
}else{
input = matrix(-1,nrow=1)
}
for(j in seq_len(nrow(input))){
A[[i]] = intfast(A[[i]]$op,input[j,],A[[i]]$n,1,A[[i]]$rb,FALSE,FALSE)
if(length(A[[i]]$out)) output = rbind(output,matrix(A[[i]]$out,ncol=3,byrow=TRUE))
}
}
step = step + 1
cat(step,"\r")
if(any(output[,1]==255)){
stop(sprintf("Packet for address 255: (%i,%i)\n",output[output[,1]==255,1],output[output[,1]==255,2]))
}
}
i
#Day 23 Puzzle 1
options(digits=22)
source("intcode_fast_but_dirty.R")
code = scan("input23.txt",sep=",")
A=list()
for(i in 1:50){
A[[i]] = intfast(code,i-1,1,1,0,FALSE,FALSE)
}
output=matrix(nrow=0,ncol=3)
step=0
while(any(sapply(A,function(x)x$status))){
for(i in 1:50){
if(nrow(output)&ncol(output)){
if(i%in%output[,1]+1){
input = output[output[,1]+1==i,2:3,drop=FALSE]
output = output[output[,1]+1!=i,,drop=FALSE]
}else{
input = matrix(-1,nrow=1)
}
}else{
input = matrix(-1,nrow=1)
}
for(j in seq_len(nrow(input))){
A[[i]] = intfast(A[[i]]$op,as.integer(input[j,]),A[[i]]$n,1,A[[i]]$rb,FALSE,FALSE)
if(length(A[[i]]$out)) output = rbind(output,matrix(A[[i]]$out,ncol=3,byrow=TRUE))
}
}
step = step + 1
cat(step,"\r")
if(any(output[,1]==255)){
stop(sprintf("Packet for address 255: (%i,%i)\n",output[output[,1]==255,1],output[output[,1]==255,2]))
}
}
i
lapply(A,funtion(x)x$status)
lapply(A,function(x)x$status)
sapply(A,function(x)x$status)
any(sapply(A,function(x)x$status))
#Day 23 Puzzle 1
options(digits=22)
source("intcode_fast_but_dirty.R")
code = scan("input23.txt",sep=",")
A=list()
for(i in 1:50){
A[[i]] = intfast(code,i-1,1,1,0,FALSE,FALSE)
}
output=matrix(nrow=0,ncol=3)
step=0
while(all(sapply(A,function(x)x$status))!=0){
for(i in 1:50){
if(nrow(output)&ncol(output)){
if(i%in%output[,1]+1){
input = output[output[,1]+1==i,2:3,drop=FALSE]
output = output[output[,1]+1!=i,,drop=FALSE]
}else{
input = matrix(-1,nrow=1)
}
}else{
input = matrix(-1,nrow=1)
}
for(j in seq_len(nrow(input))){
A[[i]] = intfast(A[[i]]$op,as.integer(input[j,]),A[[i]]$n,1,A[[i]]$rb,FALSE,FALSE)
if(length(A[[i]]$out)) output = rbind(output,matrix(A[[i]]$out,ncol=3,byrow=TRUE))
}
}
step = step + 1
cat(step,"\r")
if(any(output[,1]==255)){
stop(sprintf("Packet for address 255: (%i,%i)\n",output[output[,1]==255,1],output[output[,1]==255,2]))
}
}
i
#Day 23 Puzzle 1
options(digits=22)
source("intcode_fast_but_dirty.R")
code = scan("input23.txt",sep=",")
A=list()
for(i in 1:50){
A[[i]] = intfast(code,i-1,1,1,0,FALSE,FALSE)
}
output=matrix(nrow=0,ncol=3)
step=0
while(all(sapply(A,function(x)x$status)!=0)){
for(i in 1:50){
if(nrow(output)&ncol(output)){
if(i%in%output[,1]+1){
input = output[output[,1]+1==i,2:3,drop=FALSE]
output = output[output[,1]+1!=i,,drop=FALSE]
}else{
input = matrix(-1,nrow=1)
}
}else{
input = matrix(-1,nrow=1)
}
for(j in seq_len(nrow(input))){
A[[i]] = intfast(A[[i]]$op,as.integer(input[j,]),A[[i]]$n,1,A[[i]]$rb,FALSE,FALSE)
if(length(A[[i]]$out)) output = rbind(output,matrix(A[[i]]$out,ncol=3,byrow=TRUE))
}
}
step = step + 1
cat(step,"\r")
if(any(output[,1]==255)){
stop(sprintf("Packet for address 255: (%i,%i)\n",output[output[,1]==255,1],output[output[,1]==255,2]))
}
}
output
#Day 23 Puzzle 1
options(digits=22)
source("intcode_fast_but_dirty.R")
code = scan("input23.txt",sep=",")
A=list()
for(i in 1:50){
A[[i]] = intfast(code,i-1,1,1,0,FALSE,FALSE)
}
output=matrix(nrow=0,ncol=3)
step=0
while(all(sapply(A,function(x)x$status)!=0)){
for(i in 1:50){
if(nrow(output)&ncol(output)){
if(i%in%output[,1]+1){
input = output[as.integer(output[,1])+1==i,2:3,drop=FALSE]
output = output[as.integer(output[,1])+1!=i,,drop=FALSE]
}else{
input = matrix(-1,nrow=1)
}
}else{
input = matrix(-1,nrow=1)
}
for(j in seq_len(nrow(input))){
A[[i]] = intfast(A[[i]]$op,as.integer(input[j,]),A[[i]]$n,1,A[[i]]$rb,FALSE,FALSE)
if(length(A[[i]]$out)) output = rbind(output,matrix(A[[i]]$out,ncol=3,byrow=TRUE))
}
}
step = step + 1
cat(step,"\r")
if(any(output[,1]==255)){
stop(sprintf("Packet for address 255: (%i,%i)\n",output[output[,1]==255,1],output[output[,1]==255,2]))
}
}
output
input
as.integer(input)
as.integer("18203900260616")
18203900260616
str(18203900260616)
as.numeric("18203900260616")
#Day 23 Puzzle 1
options(digits=22)
source("intcode_fast_but_dirty.R")
code = scan("input23.txt",sep=",")
A=list()
for(i in 1:50){
A[[i]] = intfast(code,i-1,1,1,0,FALSE,FALSE)
}
output=matrix(nrow=0,ncol=3)
step=0
while(all(sapply(A,function(x)x$status)!=0)){
for(i in 1:50){
if(nrow(output)&ncol(output)){
if(i%in%output[,1]+1){
input = output[as.integer(output[,1])+1==i,2:3,drop=FALSE]
output = output[as.integer(output[,1])+1!=i,,drop=FALSE]
}else{
input = matrix(-1,nrow=1)
}
}else{
input = matrix(-1,nrow=1)
}
for(j in seq_len(nrow(input))){
A[[i]] = intfast(A[[i]]$op,as.numeric(input[j,]),A[[i]]$n,1,A[[i]]$rb,FALSE,FALSE)
if(length(A[[i]]$out)) output = rbind(output,matrix(A[[i]]$out,ncol=3,byrow=TRUE))
}
}
step = step + 1
cat(step,"\r")
if(any(output[,1]==255)){
stop(sprintf("Packet for address 255: (%i,%i)\n",output[output[,1]==255,1],output[output[,1]==255,2]))
}
}
i
#Day 23 Puzzle 1
options(digits=22)
source("intcode_fast_but_dirty.R")
code = scan("input23.txt",sep=",")
A=list()
for(i in 1:50){
A[[i]] = intfast(code,i-1,1,1,0,FALSE,FALSE)
}
output=matrix(nrow=0,ncol=3)
step=0
while(all(sapply(A,function(x)x$status)!=0)){
for(i in 1:50){
if(nrow(output)&ncol(output)){
if(i%in%output[,1]+1){
input = output[as.integer(output[,1])+1==i,2:3,drop=FALSE]
output = output[as.integer(output[,1])+1!=i,,drop=FALSE]
}else{
input = matrix(-1,nrow=1)
}
}else{
input = matrix(-1,nrow=1)
}
for(j in seq_len(nrow(input))){
A[[i]] = intfast(A[[i]]$op,as.numeric(input[j,]),A[[i]]$n,1,A[[i]]$rb,FALSE,FALSE)
if(length(A[[i]]$out)) output = rbind(output,matrix(A[[i]]$out,ncol=3,byrow=TRUE))
}
}
step = step + 1
cat(step,"\r")
if(any(output[,1]==255)){
stop(sprintf("Packet for address 255: (%s,%s)\n",output[output[,1]==255,2],output[output[,1]==255,2]))
}
}
#Day 23 Puzzle 1
options(digits=22)
source("intcode_fast_but_dirty.R")
code = scan("input23.txt",sep=",")
A=list()
for(i in 1:50){
A[[i]] = intfast(code,i-1,1,1,0,FALSE,FALSE)
}
output=matrix(nrow=0,ncol=3)
step=0
while(all(sapply(A,function(x)x$status)!=0)){
for(i in 1:50){
if(nrow(output)&ncol(output)){
if(i%in%output[,1]+1){
input = output[as.integer(output[,1])+1==i,2:3,drop=FALSE]
output = output[as.integer(output[,1])+1!=i,,drop=FALSE]
}else{
input = matrix(-1,nrow=1)
}
}else{
input = matrix(-1,nrow=1)
}
for(j in seq_len(nrow(input))){
A[[i]] = intfast(A[[i]]$op,as.numeric(input[j,]),A[[i]]$n,1,A[[i]]$rb,FALSE,FALSE)
if(length(A[[i]]$out)) output = rbind(output,matrix(A[[i]]$out,ncol=3,byrow=TRUE))
}
}
step = step + 1
cat(step,"\r")
if(any(output[,1]==255)){
stop(sprintf("Packet for address 255: (%s,%s)\n",output[output[,1]==255,2],output[output[,1]==255,3]))
}
}
neigh = matrix(c(0,1,0,-1,1,0,-1,0),ncol=2,byrow=TRUE)
x=c(0,0)
x+neigh
map=matrix(ncol=20,nrow=20)
eg = expand.grid(seq_len(nrow(map)),seq_len(ncol(map)))
neighbours = eg[i,,drop=FALSE]+neigh
eg[i,,drop=FALSE]+neigh
eg[i,,drop=FALSE]
i=1
eg[i,,drop=FALSE]
eg[i,,drop=FALSE]+neigh
neigh = matrix(c(0,1,0,-1,1,0,-1,0),ncol=2,byrow=TRUE)
apply(neigh,1,function(x)x+eg[1,])
do.call(rbind,apply(neigh,1,function(x)x+eg[1,]))
do.call(rbind,apply(neigh,1,function(x)map[x[1]+eg[1,1],x[2]+eg[1,2]))
do.call(rbind,apply(neigh,1,function(x)map[x[1]+eg[1,1],x[2]+eg[1,2]]))
apply(neigh,1,function(x)map[x[1]+eg[1,1],x[2]+eg[1,2]])
content = map[eg[i,1],eg[i,2]]
map=matrix(".",nrow=10,ncol=10)
map[5,5]=map[6,6]="#"
mult = matrix(1:100,nrow=10,ncol=10,byrow=T)
mult[map=="#"]
biodiv_rate = function(map){
a = (seq_len(nrwo(map)*ncol(map))-1)[map=="#"]
sum(2^a)
}
biodiv_rate(map)
biodiv_rate = function(map){
a = (seq_len(nro(map)*ncol(map))-1)[map=="#"]
sum(2^a)
}
biodiv_rate(map)
biodiv_rate = function(map){
a = (seq_len(nrow(map)*ncol(map))-1)[map=="#"]
sum(2^a)
}
biodiv_rate(map)
readLines("input24.txt")
A=list(map,map)
A
identical(A)
A[[1]]==A[[2]]
all(A[[1]]==A[[2]])
A=list();A[[1]]=map;for(i in 1:50){map = new_state(map); n = n+1; A[[n]] = map}
#Day 24 Puzzle 1
options(digits=22)
map = do.call(rbind,strsplit(readLines("input24.txt"),""))
new_state = function(map){
eg = expand.grid(seq_len(nrow(map)),seq_len(ncol(map)))
new_map = map
neigh = matrix(c(0,1,0,-1,1,0,-1,0),ncol=2,byrow=TRUE)
for(i in 1:nrow(eg)){
content_n = table(unlist(apply(neigh,1,function(x)map[x[1]+eg[i,1],x[2]+eg[i,2]])))
content = map[eg[i,1],eg[i,2]]
new_map[eg[i,1],eg[i,2]] = ifelse(content=="#" & content_n['#']!=1,'.', ifelse(content=="." & content_n['#']%in%1:2,"#",content))
}
new_state
}
biodiv_rate = function(map){
a = (seq_len(nrow(map)*ncol(map))-1)[map=="#"]
sum(2^a)
}
map
A=list();A[[1]]=map;for(i in 1:50){map = new_state(map); n = n+1; A[[n]] = map}
i
#Day 24 Puzzle 1
options(digits=22)
map = do.call(rbind,strsplit(readLines("input24.txt"),""))
new_state = function(map){
eg = expand.grid(seq_len(nrow(map)),seq_len(ncol(map)))
new_map = map
neigh = matrix(c(0,1,0,-1,1,0,-1,0),ncol=2,byrow=TRUE)
for(i in 1:nrow(eg)){
content_n = table(unlist(apply(neigh,1,function(x)if(x[1]+eg[i+1]>0 & x[2]+eg[i+2]>0)map[x[1]+eg[i,1],x[2]+eg[i,2]])))
content = map[eg[i,1],eg[i,2]]
new_map[eg[i,1],eg[i,2]] = ifelse(content=="#" & content_n['#']!=1,'.', ifelse(content=="." & content_n['#']%in%1:2,"#",content))
}
new_state
}
A=list();A[[1]]=map;for(i in 1:50){map = new_state(map); n = n+1; A[[n]] = map}
i
map
new_state(map)
new_state = function(map){
eg = expand.grid(seq_len(nrow(map)),seq_len(ncol(map)))
new_map = map
neigh = matrix(c(0,1,0,-1,1,0,-1,0),ncol=2,byrow=TRUE)
for(i in 1:nrow(eg)){
content_n = table(unlist(apply(neigh,1,function(x)if(x[1]+eg[i,1]>0 & x[2]+eg[i,2]>0)map[x[1]+eg[i,1],x[2]+eg[i,2]])))
content = map[eg[i,1],eg[i,2]]
new_map[eg[i,1],eg[i,2]] = ifelse(content=="#" & content_n['#']!=1,'.', ifelse(content=="." & content_n['#']%in%1:2,"#",content))
}
new_state
}
new_state(map)
eg = expand.grid(seq_len(nrow(map)),seq_len(ncol(map)))
new_map = map
neigh = matrix(c(0,1,0,-1,1,0,-1,0),ncol=2,byrow=TRUE)
for(i in 1:nrow(eg)){
content_n = table(unlist(apply(neigh,1,function(x)if(x[1]+eg[i,1]>0 & x[2]+eg[i,2]>0)map[x[1]+eg[i,1],x[2]+eg[i,2]])))
content = map[eg[i,1],eg[i,2]]
new_map[eg[i,1],eg[i,2]] = ifelse(content=="#" & content_n['#']!=1,'.', ifelse(content=="." & content_n['#']%in%1:2,"#",content))
}
i
eg[5,]
new_state = function(map){
eg = expand.grid(seq_len(nrow(map)),seq_len(ncol(map)))
new_map = map
neigh = matrix(c(0,1,0,-1,1,0,-1,0),ncol=2,byrow=TRUE)
for(i in 1:nrow(eg)){
content_n = table(unlist(apply(neigh,1,function(x)if((x[1]+eg[i,1]>0 & x[2]+eg[i,2]>0)&(x[1]+eg[i,1]<=nrow(map) & x[2]+eg[i,2]<=ncol(map)))map[x[1]+eg[i,1],x[2]+eg[i,2]])))
content = map[eg[i,1],eg[i,2]]
new_map[eg[i,1],eg[i,2]] = ifelse(content=="#" & content_n['#']!=1,'.', ifelse(content=="." & content_n['#']%in%1:2,"#",content))
}
new_state
}
new_state(map)
map
new_state(map)
new_state = function(map){
eg = expand.grid(seq_len(nrow(map)),seq_len(ncol(map)))
new_map = map
neigh = matrix(c(0,1,0,-1,1,0,-1,0),ncol=2,byrow=TRUE)
for(i in 1:nrow(eg)){
content_n = table(unlist(apply(neigh,1,function(x)if((x[1]+eg[i,1]>0 & x[2]+eg[i,2]>0)&(x[1]+eg[i,1]<=nrow(map) & x[2]+eg[i,2]<=ncol(map)))map[x[1]+eg[i,1],x[2]+eg[i,2]])))
content = map[eg[i,1],eg[i,2]]
new_map[eg[i,1],eg[i,2]] = ifelse(content=="#" & content_n['#']!=1,'.', ifelse(content=="." & content_n['#']%in%1:2,"#",content))
}
new_map
}
new_state(map)
eg = expand.grid(seq_len(nrow(map)),seq_len(ncol(map)))
new_map = map
neigh = matrix(c(0,1,0,-1,1,0,-1,0),ncol=2,byrow=TRUE)
i
i=1
content_n = table(unlist(apply(neigh,1,function(x)if((x[1]+eg[i,1]>0 & x[2]+eg[i,2]>0)&(x[1]+eg[i,1]<=nrow(map) & x[2]+eg[i,2]<=ncol(map)))map[x[1]+eg[i,1],x[2]+eg[i,2]])))
content_n
new_state = function(map){
eg = expand.grid(seq_len(nrow(map)),seq_len(ncol(map)))
new_map = map
neigh = matrix(c(0,1,0,-1,1,0,-1,0),ncol=2,byrow=TRUE)
for(i in 1:nrow(eg)){
content_n = table(factor(unlist(apply(neigh,1,function(x)if((x[1]+eg[i,1]>0 & x[2]+eg[i,2]>0)&(x[1]+eg[i,1]<=nrow(map) & x[2]+eg[i,2]<=ncol(map)))map[x[1]+eg[i,1],x[2]+eg[i,2]])),c(".","#")))
content = map[eg[i,1],eg[i,2]]
new_map[eg[i,1],eg[i,2]] = ifelse(content=="#" & content_n['#']!=1,'.', ifelse(content=="." & content_n['#']%in%1:2,"#",content))
}
new_map
}
new_state(map)
new_state(map)
A=list();A[[1]]=map;for(i in 1:50){map = new_state(map); n = n+1; A[[n]] = map}
n=1
A=list();A[[1]]=map;for(i in 1:50){map = new_state(map); n = n+1; A[[n]] = map}
A
id = function(map){paste(as.integer(map=="#"),collapse="")}
sapply(A,id)
sapply(A,id)->ids
any(table(ids)==3)
any(table(ids)==2)
#Day 24 Puzzle 1
options(digits=22)
map = do.call(rbind,strsplit(readLines("input24.txt"),""))
new_state = function(map){
eg = expand.grid(seq_len(nrow(map)),seq_len(ncol(map)))
new_map = map
neigh = matrix(c(0,1,0,-1,1,0,-1,0),ncol=2,byrow=TRUE)
for(i in 1:nrow(eg)){
content_n = table(factor(unlist(apply(neigh,1,function(x)if((x[1]+eg[i,1]>0 & x[2]+eg[i,2]>0)&(x[1]+eg[i,1]<=nrow(map) & x[2]+eg[i,2]<=ncol(map)))map[x[1]+eg[i,1],x[2]+eg[i,2]])),c(".","#")))
content = map[eg[i,1],eg[i,2]]
new_map[eg[i,1],eg[i,2]] = ifelse(content=="#" & content_n['#']!=1,'.', ifelse(content=="." & content_n['#']%in%1:2,"#",content))
}
new_map
}
id = function(map){paste(as.integer(map=="#"),collapse="")}
biodiv_rate = function(map){
a = (seq_len(nrow(map)*ncol(map))-1)[map=="#"]
sum(2^a)
}
A=list(map)
n=1
repeat{
map = new_state(map)
n = n+1
A[[n]]=map
ids = sapply(A,id)
if(any(table(ids)==2)) break
}
biodiv_rate(map)
map
ids=sapply(A,id)
n
ids
duplicated(ids)
duplicated(ids,fromLast=TRUE)
A[[120]]
(seq_len(nrow(map)*ncol(map))-1)[map=="#"]
2^(seq_len(nrow(map)*ncol(map))-1)[map=="#"]
sum(ans)
2^t(seq_len(nrow(map)*ncol(map))-1)[map=="#"]
(seq_len(nrow(map)*ncol(map))-1)
map=="#"
as.vector(map=="#")
as.vector(t(map)=="#")
biodiv_rate = function(map){
a = (seq_len(nrow(map)*ncol(map))-1)[t(map)=="#"]
sum(2^a)
}
biodiv_rate(map)
map
