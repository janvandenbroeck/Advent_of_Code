<h2>%s</h2><br/>%s<hr/>
<h2>%s</h2><br/>%s<hr/>
<h2>%s</h2><br/>%s<hr/>
<h2>%s</h2><br/>%s<hr/>
<h2>%s</h2><br/>%s<hr/>
<h2>%s</h2><br/>%s<hr/>
</body></html>',
pbw[1],pbw[2],
p[1],p[2],
fk[1],fk[2]
,smb[1],smb[2],
xkcd_tit,xkcd,
pdl[1],pdl[2],
toe_title, toe),file="comics.html")
toe <- xmlParse(getURL("http://www.kohney.com/feed/"))
toe
xpathSApply(toe,"//item/content:encoded",xmlValue)[1]
toe <- xmlParse(getURL("http://www.kohney.com/feed/"))
toe_title <- xpathSApply(toe,"//item/title",xmlValue)[1]
toe <- xpathSApply(toe,"//item/content:encoded",xmlValue)[1]
cat(sprintf('<html><body>
<h2>%s</h2><br/>%s<hr/>
<h2>%s</h2><br/>%s<hr/>
<h2>%s</h2><br/>%s<hr/>
<h2>%s</h2><br/>%s<hr/>
<h2>%s</h2><br/>%s<hr/>
<h2>%s</h2><br/>%s<hr/>
<h2>%s</h2><br/>%s<hr/>
</body></html>',
pbw[1],pbw[2],
p[1],p[2],
fk[1],fk[2]
,smb[1],smb[2],
xkcd_tit,xkcd,
pdl[1],pdl[2],
toe_title, toe),file="comics.html")
library(feedeR)
library(RCurl)
gocomics <- function(feed){
x<-xmlParse(getURL(sprintf("https://www.comicsrss.com/rss/%s.rss",feed)))
title <- xpathSApply(x,"//item/title",xmlValue)[1]
img <- xpathSApply(x,"//item/description",xmlValue)[[1]]
sprintf("<h2>%s</h2><br/>%s<hr/>",title,img)
}
gc <- c("pearlsbeforeswine","false-knees","peanuts","saturday-morning-breakfast-cereal","poorly-drawn-lines")
xk <- xmlParse(getURL("https://xkcd.com/atom.xml"))
xkcd <- xmlToList(xk)$entry$summary$text
xkcd_tit <- xmlToList(xk)$entry$title
toe <- xmlParse(getURL("http://www.kohney.com/feed/"))
toe_title <- xpathSApply(toe,"//item/title",xmlValue)[1]
toe <- xpathSApply(toe,"//item/content:encoded",xmlValue)[1]
sink("comics.html")
cat("<html><body>")
for(i in seq_along(gc)) cat(gocomics(gc[i]))
sprintf("<h2>%s</h2><br/>%s<hr/>",xkcd_tit,xkcd)
sprintf("<h2>%s</h2><br/>%s<hr/>",toe_title, toe)
cat("</body></html>")
sink()
library(feedeR)
library(RCurl)
gocomics <- function(feed){
x<-xmlParse(getURL(sprintf("https://www.comicsrss.com/rss/%s.rss",feed)))
title <- xpathSApply(x,"//item/title",xmlValue)[1]
img <- xpathSApply(x,"//item/description",xmlValue)[[1]]
sprintf("<h2>%s</h2><br/>%s<hr/>",title,img)
}
gc <- c("pearlsbeforeswine","false-knees","peanuts","saturday-morning-breakfast-cereal","poorly-drawn-lines")
xk <- xmlParse(getURL("https://xkcd.com/atom.xml"))
xkcd <- xmlToList(xk)$entry$summary$text
xkcd_tit <- xmlToList(xk)$entry$title
toe <- xmlParse(getURL("http://www.kohney.com/feed/"))
toe_title <- xpathSApply(toe,"//item/title",xmlValue)[1]
toe <- xpathSApply(toe,"//item/content:encoded",xmlValue)[1]
sink("comics.html")
cat("<html><body>")
for(i in seq_along(gc)) cat(gocomics(gc[i]))
cat(sprintf("<h2>%s</h2><br/>%s<hr/>",xkcd_tit,xkcd))
cat(sprintf("<h2>%s</h2><br/>%s<hr/>",toe_title, toe))
cat("</body></html>")
sink()
library(RCurl)
library(XML)
gocomics <- function(feed){
x<-xmlParse(getURL(sprintf("https://www.comicsrss.com/rss/%s.rss",feed)))
title <- xpathSApply(x,"//item/title",xmlValue)[1]
img <- xpathSApply(x,"//item/description",xmlValue)[[1]]
sprintf("<h3>%s</h3><br/>%s<hr/>",title,img)
}
gc <- c("pearlsbeforeswine","false-knees","peanuts","saturday-morning-breakfast-cereal","poorly-drawn-lines")
xk <- xmlParse(getURL("https://xkcd.com/atom.xml"))
xkcd <- xmlToList(xk)$entry$summary$text
xkcd_tit <- xmlToList(xk)$entry$title
toe <- xmlParse(getURL("http://www.kohney.com/feed/"))
toe_title <- xpathSApply(toe,"//item/title",xmlValue)[1]
toe <- xpathSApply(toe,"//item/content:encoded",xmlValue)[1]
sink("comics.html")
cat("<html><body>")
for(i in seq_along(gc)) cat(gocomics(gc[i]))
cat(sprintf("<h3>%s</h3><br/>%s<hr/>",xkcd_tit,xkcd))
cat(sprintf("<h3>%s</h3><br/>%s<hr/>",toe_title, toe))
cat("</body></html>")
sink()
sink("comics.html")
cat("<html><body>")
for(i in seq_along(gc)) cat(gocomics(gc[i]))
cat(sprintf("<h2>xkcd</h2><h3>%s</h3><br/>%s<hr/>",xkcd_tit,xkcd))
cat(sprintf("<h2>The Other End</h2><h3>%s</h3><br/>%s<hr/>",toe_title, toe))
cat("</body></html>")
sink()
sink("comics.html")
cat("<html><body>")
for(i in seq_along(gc)) cat(gocomics(gc[i]))
cat(sprintf("<h2>xkcd</h2><h3>%s</h3><br/>%s<hr/>",xkcd_tit,xkcd))
cat(sprintf("<h2>The Other End</h2><h3>%s</h3><br/>%s<hr/>",toe_title, gsub("150","300",toe)))
cat("</body></html>")
sink()
bou <- xmlParse(getURL("http://www.bouletcorp.com/feed/"))
bou_title <- xpathSApply(bou,"//item/title",xmlValue)[1]
bou <- xpathSApply(bou,"//item/content:encoded",xmlValue)[1]
library(RCurl)
library(XML)
gocomics <- function(feed){
x<-xmlParse(getURL(sprintf("https://www.comicsrss.com/rss/%s.rss",feed)))
title <- xpathSApply(x,"//item/title",xmlValue)[1]
img <- xpathSApply(x,"//item/description",xmlValue)[[1]]
sprintf("<h3>%s</h3><br/>%s<hr/>",title,img)
}
gc <- c("pearlsbeforeswine","false-knees","peanuts","saturday-morning-breakfast-cereal","poorly-drawn-lines")
xk <- xmlParse(getURL("https://xkcd.com/atom.xml"))
xkcd <- xmlToList(xk)$entry$summary$text
xkcd_tit <- xmlToList(xk)$entry$title
toe <- xmlParse(getURL("http://www.kohney.com/feed/"))
toe_title <- xpathSApply(toe,"//item/title",xmlValue)[1]
toe <- xpathSApply(toe,"//item/content:encoded",xmlValue)[1]
bou <- xmlParse(getURL("http://www.bouletcorp.com/feed/"))
bou_title <- xpathSApply(bou,"//item/title",xmlValue)[1]
bou <- xpathSApply(bou,"//item/content:encoded",xmlValue)[1]
sink("comics.html")
cat("<html><body>")
for(i in seq_along(gc)) cat(gocomics(gc[i]))
cat(sprintf("<h2>xkcd</h2><h3>%s</h3><br/>%s<hr/>",xkcd_tit,xkcd))
cat(sprintf("<h2>The Other End</h2><h3>%s</h3><br/>%s<hr/>",toe_title, gsub("150","300",toe)))
cat(sprintf("<h2>Boulet</h2><h3>%s</h3><br/>%s<hr/>",bou_tit,bou))
cat("</body></html>")
sink()
sink("comics.html")
cat("<html><body>")
for(i in seq_along(gc)) cat(gocomics(gc[i]))
cat(sprintf("<h2>xkcd</h2><h3>%s</h3><br/>%s<hr/>",xkcd_tit,xkcd))
cat(sprintf("<h2>The Other End</h2><h3>%s</h3><br/>%s<hr/>",toe_title, gsub("150","300",toe)))
cat(sprintf("<h2>Boulet</h2><h3>%s</h3><br/>%s<hr/>",bou_title,bou))
cat("</body></html>")
sink()
library(RCurl)
library(XML)
gocomics <- function(feed){
x<-xmlParse(getURL(sprintf("https://www.comicsrss.com/rss/%s.rss",feed)))
title <- xpathSApply(x,"//item/title",xmlValue)[1]
img <- xpathSApply(x,"//item/description",xmlValue)[[1]]
sprintf("<h3>%s</h3><br/>%s<hr/>",title,img)
}
gc <- c("pearlsbeforeswine","false-knees","peanuts","saturday-morning-breakfast-cereal","poorly-drawn-lines","calvinandhobbes")
xk <- xmlParse(getURL("https://xkcd.com/atom.xml"))
xkcd <- xmlToList(xk)$entry$summary$text
xkcd_tit <- xmlToList(xk)$entry$title
toe <- xmlParse(getURL("http://www.kohney.com/feed/"))
toe_title <- xpathSApply(toe,"//item/title",xmlValue)[1]
toe <- xpathSApply(toe,"//item/content:encoded",xmlValue)[1]
bou <- xmlParse(getURL("http://www.bouletcorp.com/feed/"))
bou_title <- xpathSApply(bou,"//item/title",xmlValue)[1]
bou <- xpathSApply(bou,"//item/content:encoded",xmlValue)[1]
sink("comics.html")
cat("<html><body>")
for(i in seq_along(gc)) cat(gocomics(gc[i]))
cat(sprintf("<h2>xkcd</h2><h3>%s</h3><br/>%s<hr/>",xkcd_tit,xkcd))
cat(sprintf("<h2>The Other End</h2><h3>%s</h3><br/>%s<hr/>",toe_title, gsub("150","300",toe)))
cat(sprintf("<h2>Boulet</h2><h3>%s</h3><br/>%s<hr/>",bou_title,bou))
cat("</body></html>")
sink()
sink()/
871/13
??presidents
702/13
519/8
81/2.8
37*56
9000+26000+20000+34000+2700+2000
93700/2000
44088/400
110.22/60
1/ans
ans*60*24
0.544*60
?array
array(el(strsplit(input8,"")),dim=c(3,2,2))
#Day 8 Puzzle 1
input8="123456789012"
array(el(strsplit(input8,"")),dim=c(3,2,2))
t(array(el(strsplit(input8,"")),dim=c(3,2,2)))
#Day 8 Puzzle 1
input8=readLines("~/Desktop/input8.txt")
input8
nchar(input8)
nchar(input8)/25/6
im=array(as.integer(el(strsplit(input8,""))),dim=c(25,6,nchar(input8)/25/6))
apply(im,3,function(x)sum(x==0))
l0=im[,,which.min(apply(im,3,function(x)sum(x==0)))]
dim(l0)
table(l0)
table(l0)[2]*table([l0]*3)l0)[3]
sum(l0==1)*sum(l0==2)
#Day 8 Puzzle 2
m=matrix(nr=6,nc=25)
m=matrix(nr=6,nc=25)
for(i in 1:25){
for(j in 1:6){
sb=im[i,j,]
m[j,i]=head(sb[sb!=2],1)
}
}
m
image(m)
image(t(m))
image(t(m),asp=1)
image(1:6,1:25,t(m),asp=1)
image(1:25,1:6,t(m),asp=1)
image(1:25,6:1,t(m),asp=1)
image(1:25,1:6,t(m)[6:1,],asp=1)
t(m)
image(1:25,1:6,t(m)[,6:1],asp=1)
image(1:25,1:6,t(m)[,6:1],asp=1,col=c("white","black"))
image(1:25,1:6,t(m)[,6:1],asp=1,col=c("white","black"),ann=F,ax=F)
library(updateR)
install.packages("updateR")
library(installr)
install.packages("installr")
install.packages(file.choose(),type="source",repos=NULL)
Cut = function(stack,n){
if(n>0){
stack = c(stack[1:n-1],stack[n:length(stack)])
}else{
stack = c(stack[length(stack)+(n:0)],stack[1:(length(stack)-abs(n))-1])
}
stack
}
Cut(1:100,10)
Cut = function(stack,n){
if(n>0){
stack = c(stack[n:length(stack)],stack[1:n-1])
}else{
stack = c(stack[length(stack)+(n:0)],stack[1:(length(stack)-abs(n))-1])
}
stack
}
Cut(1:100,10)
Cut(0:100,10)
Cut = function(stack,n){
if(n>0){
stack = c(stack[1:n],stack[(n+1):length(stack)])
}else{
stack = c(stack[length(stack)+(n:0)],stack[1:(length(stack)-abs(n))-1])
}
stack
}
Cut(0:100,10)
Cut = function(stack,n){
if(n>0){
stack = c(stack[(n+1):length(stack)],stack[1:n])
}else{
stack = c(stack[length(stack)+(n:0)],stack[1:(length(stack)-abs(n))-1])
}
stack
}
Cut(0:100,10)
Cut(0:100,-10)
Cut = function(stack,n){
if(n>0){
stack = c(stack[(n+1):length(stack)],stack[1:n])
}else{
stack = c(stack[length(stack)+((n+1):0)],stack[1:(length(stack)-abs(n))])
}
stack
}
Cut(0:100,-10)
#Day 22 Puzzle 1
instructions = readLines("input22.txt")
setwd("~/Git/AdventOfCode2019")
#Day 22 Puzzle 1
instructions = readLines("input22.txt")
Increment = function(stack,n){
newstack = rep(NA,length(stack))
for(i in n:1){
r = seq(1+i-n,length(stack),n)
newstack[r] = stack[1:length(r)]
}
}
Increment(0:9,3)
newstack = rep(NA,length(stack))
n=3
i=n
r = seq(1+i-n,length(stack),n)
r
1+n-n
length(stack)
stack
stack=0:9
length(stack)
r = seq(1+i-n,length(stack),n)
r
newstack[r]=stack[1:length(r)]
newstack
i=n-1
r = seq(1+i-n,length(stack),n)
r
Increment = function(stack,n){
newstack = rep(NA,length(stack))
for(i in n:1){
r = seq(1+i-n,length(stack),n)
r = r[r>0]
newstack[r] = stack[1:length(r)]
}
}
Increment(0:9,3)
Increment = function(stack,n){
newstack = rep(NA,length(stack))
for(i in n:1){
r = seq(1+i-n,length(stack),n)
r = r[r>0]
newstack[r] = stack[1:length(r)]
}
newstack
}
Increment(0:9,3)
Increment = function(stack,n){
newstack = rep(NA,length(stack))
for(i in n:1){
r = seq(1+i-n,length(stack),n)
r = r[r>0]
newstack[r] = stack[1:length(r)]
stack = stack[-(1:length(r))]
}
newstack
}
Increment(0:9,3)
newstack = rep(NA,length(stack))
r = seq(1+i-n,length(stack),n)
r = r[r>0]
newstack[r] = stack[1:length(r)]
stack = stack[-(1:length(r))]
stack
newstack
stack = 0:9
n=3
i=n
r = seq(1+i-n,length(stack),n)
r = r[r>0]
newstack[r] = stack[1:length(r)]
stack = stack[-(1:length(r))]
newstack
stack
newstack = rep(NA,length(stack))
stack = 0.)
n=3
i=3
stack = 0.9
stack = 0:9
r = seq(1+i-n,length(stack),n)
r = r[r>0]
r
newstack[r] = stack[1:length(r)]
newstack
stack
stack = stack[-(1:length(r))]
stack
i=2
r = seq(1+i-n,length(stack),n)
r = r[r>0]
r
r = seq(1+i-n,length(stack),n)
r
newstack = rep(NA,length(stack))
stack=0:9
n=3
newstack = rep(NA,length(stack))
r = seq(1,length(stack),n)
for(i in n:1){
r = r-1
r = r[r>0]
newstack[r] = stack[1:length(r)]
stack = stack[-(1:length(r))]
}
newstack
newstack = rep(NA,length(stack))
stack=0:9
n=3
newstack = rep(NA,length(stack))
r = seq(1,length(stack),n)
newstack[r] = stack[1:length(r)]
stack = stack[-(1:length(r))]
r = r-1
r = r[r>0]
newstack[r] = stack[1:length(r)]
stack = stack[-(1:length(r))]
r = r-1
r = r[r>0]
newstack[r] = stack[1:length(r)]
stack = stack[-(1:length(r))]
r = r-1
r = r[r>0]
newstack
stack
newstack
Increment = function(stack,n){
newstack = rep(NA,length(stack))
r = seq(1,length(stack),n)
while(length(stack)){
newstack[r] = stack[1:length(r)]
stack = stack[-(1:length(r))]
r = r-1
r = r[r>0]
}
newstack
}
stack = 0:10006
for(i in 1:nrow(instructions)){
if(grepl("^cut",instructions[i])){
n = as.integer(regmatches(instructions[i],gregexpr("[0-9]+",instructions[i]))[[1]])
stack = Cut(stack, n)
}else if(grepl("increment",instructions[i])){
n = as.integer(regmatches(instructions[i],gregexpr("[0-9]+",instructions[i]))[[1]])
stack = Increment(stack,n)
}else{
stack = rev(stack)
}
}
i
instructions
stack = 0:10006
for(i in seq_along(instructions)){
if(grepl("^cut",instructions[i])){
n = as.integer(regmatches(instructions[i],gregexpr("[0-9]+",instructions[i]))[[1]])
stack = Cut(stack, n)
}else if(grepl("increment",instructions[i])){
n = as.integer(regmatches(instructions[i],gregexpr("[0-9]+",instructions[i]))[[1]])
stack = Increment(stack,n)
}else{
stack = rev(stack)
}
}
stack[2020]
stack[2019]
stack[2018]
stack
stack = 0:10006
i=1
n = as.integer(regmatches(instructions[i],gregexpr("[0-9]+",instructions[i]))[[1]])
n
stack = Cut(stack, n)
head(stack)
stack = 0:10006
#Day 22 Puzzle 1
instructions = readLines("input22.txt")
Cut = function(stack,n){
if(n>0){
stack = c(stack[(n+1):length(stack)],stack[1:n])
}else{
stack = c(stack[length(stack)+((n+1):0)],stack[1:(length(stack)-abs(n))])
}
stack
}
Increment = function(stack,n){
newstack = rep(NA,length(stack))
r = seq(1,length(stack),n)
while(length(stack)){
newstack[r] = stack[1:length(r)]
stack = stack[-(1:length(r))]
r = r-1
r = r[r>0]
}
newstack
}
stack = 0:10006
for(i in seq_along(instructions)){
if(grepl("^cut",instructions[i])){
n = as.integer(regmatches(instructions[i],gregexpr("[0-9]+",instructions[i]))[[1]])
stack = Cut(stack, n)
}else if(grepl("increment",instructions[i])){
n = as.integer(regmatches(instructions[i],gregexpr("[0-9]+",instructions[i]))[[1]])
stack = Increment(stack,n)
}else{
stack = rev(stack)
}
}
sum(is.na(stack))
stack = 0:10006
head(instructions)
i=1
if(grepl("^cut",instructions[i])){
n = as.integer(regmatches(instructions[i],gregexpr("[0-9]+",instructions[i]))[[1]])
stack = Cut(stack, n)
}else if(grepl("increment",instructions[i])){
n = as.integer(regmatches(instructions[i],gregexpr("[0-9]+",instructions[i]))[[1]])
stack = Increment(stack,n)
}else{
stack = rev(stack)
}
i=2
n = as.integer(regmatches(instructions[i],gregexpr("[0-9]+",instructions[i]))[[1]])
n
head(stack)
stack = Increment(stack,n)
sum(is.na(stack))
