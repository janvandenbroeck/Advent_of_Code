install.packages("rgdal")
install.packages("sf")
install.packages("maptools")
install.packages("fields")
install.packages("devtools")
library(devtools)
install_github("plannapus/NSBcompanion")
(2366242-2248032)/(2366242+2248032+56869)
(2366242+2248032+56869)*100/93
5022734-2366242-2248032-56869
(2366242-2248032)
351591-118210
118210+(351591-118210)/2
234901/351591
curve(runif(x),-1,1)
curve(runif(x),-1,10)
curve(runif(1,mean=x),-1,10)
?runif
curve(runif(1,0,x),-1,10)
curve(runif(1,0,x),0,10)
curve(runif(1,0,x),1,10)
curve(runif(x,0,x),1,10)
nsb <- nsbConnect("nsb","postgres",pwpost)
install.packages("akima")
nsb <- nsbConnect("nsb","postgres",pwpost)
dbSendQuery(nsb,"CREATE ROLE zbrook WITH LOGIN ENCRYPTED PASSWORD 'pf@EECO' IN ROLE normal_users;")
install.packages("akima")
7068/8
setwd("~/Git/Advent_of_Code/2020")
input <- readLines("input02.txt")
parse.one <- function(res, result) {
m <- do.call(rbind, lapply(seq_along(res), function(i) {
if(result[i] == -1) return("")
st <- attr(result, "capture.start")[i, ]
substring(res[i], st, st + attr(result, "capture.length")[i, ] - 1)
}))
colnames(m) <- attr(result, "capture.names")
m
}
parsed <- regexpr("^(?<a>[0-9]+)-(?<b>[0-9]+) (?<c>[a-z]+): (?<d>[a-z]+)$", input)
parse.one(input,parsed)
parsed <- regexpr("^(?<a>[0-9]+)-(?<b>[0-9]+) (?<c>[a-z]+): (?<d>[a-z]+)$", input, perl=TRUE)
parse.one(input,parsed)
table <- parse.one(input,parsed)
tab <- parse.one(input,parsed)
tab[,1] <- as.integer(tab[,1])
tab[,2] <- as.integer(tab[,2])
strsplit(tab[,4],"")
lapply(strsplit(tab[,4],""),table)
let_by_let  <- lapply(strsplit(tab[,4],""),table)
let_by_let  <- lapply(strsplit(tab[,4],""),function(x)table(factor(x,levels=letters)))
let_by_let
input <- readLines("input02.txt")
parse.one <- function(res, result) {
m <- do.call(rbind, lapply(seq_along(res), function(i) {
if(result[i] == -1) return("")
st <- attr(result, "capture.start")[i, ]
substring(res[i], st, st + attr(result, "capture.length")[i, ] - 1)
}))
colnames(m) <- attr(result, "capture.names")
m
}
parsed <- regexpr("^(?<a>[0-9]+)-(?<b>[0-9]+) (?<c>[a-z]+): (?<d>[a-z]+)$", input, perl=TRUE)
tab <- parse.one(input,parsed)
tab[,1] <- as.integer(tab[,1])
tab[,2] <- as.integer(tab[,2])
let_by_let  <- lapply(strsplit(tab[,4],""),function(x)table(factor(x,levels=letters)))
valids <- 0
for(i in seq_along(input)){
n <- let_by_let[[i]][which(letters==tab[i,3])]
if(n<=tab[i,2]&n>=tab[i,1]) valids <- valids + 1
}
valids
cat(valids)
i=1
i
tab[i,]
n <- let_by_let[[i]][which(letters==tab[i,3])]
n
n<=tab[i,2]&n>=tab[i,1]
valids <- c()
for(i in seq_along(input)){
n <- let_by_let[[i]][which(letters==tab[i,3])]
if(n<=tab[i,2]&n>=tab[i,1]) valids <- c(valids,i)
}
valids
tab[,3]
do.call(rbind,let_by_let)
letters=="z"
do.call(rbind,let_by_let)[,sapply(tab[,3],function(x)letters==x)]
sapply(tab[,3],function(x)letters==x)
lapply(seq_along(let_by_let),function(i)let_by_let[[i]][letters==tab[i,3]])
u <- unlist(lapply(seq_along(let_by_let),function(i)let_by_let[[i]][letters==tab[i,3]]))
u
check <- names(u)
check
check==tab[i,3]
cbind(check,tab[i,3])
cbind(check,tab[,3])
check==tab[,3]
all(check==tab[,3])
sum(u>=tab[i,1]&u<=tab[i,2])
sum(u>=tab[,1]&u<=tab[,2])
u
sample(u)
sample(u,1)
sample(1:1000,1)
tab[862,]
u[862]
tab[,1]
tab <- as.data.frame(tab)
tab
parsed <- regexpr("^(?<lb>[0-9]+)-(?<ub>[0-9]+) (?<let>[a-z]+): (?<p>[a-z]+)$", input, perl=TRUE)
tab <- parse.one(input,parsed)
tab <- as.data.frame(tab)
input <- readLines("input02.txt")
parse.one <- function(res, result) {
m <- do.call(rbind, lapply(seq_along(res), function(i) {
if(result[i] == -1) return("")
st <- attr(result, "capture.start")[i, ]
substring(res[i], st, st + attr(result, "capture.length")[i, ] - 1)
}))
colnames(m) <- attr(result, "capture.names")
m
}
parsed <- regexpr("^(?<lb>[0-9]+)-(?<ub>[0-9]+) (?<let>[a-z]+): (?<p>[a-z]+)$", input, perl=TRUE)
tab <- parse.one(input,parsed)
tab <- as.data.frame(tab)
tab$lb <- as.integer(tab$lb)
tab$ub <- as.integer(tab$ub)
let_by_let  <- lapply(strsplit(tab$p,""),function(x)table(factor(x,levels=letters)))
u <- unlist(lapply(seq_along(let_by_let),function(i)let_by_let[[i]][letters==tab$let[i]]))
check <- names(u)
all(check==tab$let)
sum(u>=tab$lb&u<=tab$ub)
substr(tab$p,tab$lp,tab$up)
res <- c()
for(i in 1:nrow(input)){
res[i] <- grepl(tab$let[i],substr(tab$p[i],tab$lp[i],tab$up[i]))
}
sum(res)
res <- c()
for(i in 1:nrow(tab)){
res[i] <- grepl(tab$let[i],substr(tab$p[i],tab$lp[i],tab$up[i]))
}
sum(res)
tab$lp[i]
res <- c()
for(i in 1:nrow(tab)){
res[i] <- grepl(tab$let[i],substr(tab$p[i],tab$lb[i],tab$ub[i]))
}
sum(res)
i
tab$let[i]
substr(tab$p[i],tab$lb[i],tab$ub[i])
tab[i,]
res <- c()
for(i in 1:nrow(tab)){
res[i] <- sum(el(strsplit(substr(tab$p[i],tab$lb[i],tab$ub[i]),""))==tab$let[i])
}
res
sum(res==1)
res <- c()
for(i in 1:nrow(tab)){
res[i] <- substr(tab$p[i],tab$lb[i],tab$lb[i])==tab$let[i] + substr(tab$p[i],tab$ub[i],tab$ub[i])==tab$let[i]
}
sum(res==1)
res <- c()
for(i in 1:nrow(tab)){
l <- substr(tab$p[i],tab$lb[i],tab$lb[i])==tab$let[i]
u <- substr(tab$p[i],tab$ub[i],tab$ub[i])==tab$let[i]
res[i] <- l+u
}
res
sum(res==1)
